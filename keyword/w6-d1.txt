Database: 정보의 효율적 활용을 위해 구조화된 데이터 모음

RDBMS: RDB(상호 연관된 데이터를 테이블 형태로 저장하는 데이터베이스)를 관리하는 시스템으로 트랜잭션, 무결성 제약 및 동시성 제어를 지원합니다.

테이블: RDB의 구성 단위

행 (Row), 열 (Column): 테이블을 구성하는 단위로, 행은 관련된 데이터의 모음, 열은 데이터의 속성을 의미한다.

기본 키 (Primary Key): 행을 유일하게 식별할 수 있는 식별자

외래 키 (Foreign Key): 참조하는 다른 테이블의 기본키

데이터 타입 (INT, VARCHAR, DATE, TIMESTAMP 등)

SQL: 원하는 자원을 명시하는 선언적 구조 질의 언어로 DDL, DML, DCL등으로 구성됩니다. 데이터베이스 조작을 위해 사용합니다.

DDL: 데이터베이스 구조를 만들거나 변경하는 명령어입니다.

DML: 데이터베이스에 데이터를 CRUD하기 위해 사용하는 명령어입니다.

DCL: 데이터베이스의 접근 권한을 관리하는 명령어입니다.

CREATE, ALTER, DROP: DDL에서 지원하는 명령어로 각각 테이블 생성, 테이블 구조 변경, 테이블 삭제를 수행합니다.

INSERT, SELECT, UPDATE, DELETE: DML에서 지원하는 명령어로 각각 데이터 삽입/검색/수정/삭제를 수행합니다.

WHERE 절: 데이터 필터링(레코드 식별)을 위한 구문으로 여러 조건식과 연산자를 제공합니다.

집계함수 (COUNT, SUM, AVG, MAX, MIN): 열에 대한 집계기능을 제공하는 함수입니다.

ORDER BY: 결과를 정렬하기 위한 구문입니다. ASC/DESC와 LIMIT, OFFSET를 사용할 수 있습니다.

LIMIT, OFFSET: 데이터의 OFFSET번째부터, LIMIT개의 레코드를 가져옵니다.

GROUP BY: 결과 집합을 그룹화할 때 사용하는 구문입니다. HAVING으로 필터링이 가능하며, 집계함수와 함께 사용시, 그룹별 집계 결과를 구할 수 있습니다.

정규화: RDB 설계에 적합한 데이터 형태를 만들기 위해 데이터의 중복을 제거하는 과정입니다.

제1정규형 (1NF): 모든 컬럼은 하나의 값만 가져야 합니다.

제2정규형 (2NF): 부분 함수 종속을 제거해 기본키가 아닌 요소가 기본키 전체에 종속되도록 해야합니다.

제3정규형 (3NF): 이행적 종속을 제거해, 기본키 이외의 속성이 다른 일반 속성에 종속되지 않도록 해야합니다.

반정규화: 정규화에 따른 과도한 JOIN을 방지하기 위해, 갱신 빈도가 낮고, 빠른 조회가 필요한 데이터를 다시 합치는 과정입니다.

이상 현상: 데이터베이스 설계가 잘못 되었을 때 발생하는 문제로, 주로 데이터의 중복과 잘못된 종속 관계로 인해 발생합니다. 삽입 이상, 삭제 이상, 갱신 이상이 있습니다.

ERD: 개체와 개체 간 관계를 시각적으로 나타낸 도표

엔티티: 현실 세계의 개체를 추상화한 개념으로 데이터베이스의 테이블과 매핑된다.

카디널리티 (Cardinality): 개체 간의 수적 관계를 표현한 것

(선택) 함수적 종속성: 한 속성의 값이, 다른 속성의 값을 유일하게 식별하는 관계

(선택) 부분 함수 종속: 복합키가 아닌 값이, 복합키의 일부에 의해 유일하게 식별되는 관계

(선택) 이행적 종속: 기본키가 아닌 다른 값에 의해 직접적으로 식별되는 관계

(선택) 복합 키: 2개 이상 속성을 결합해, 행을 유일하게 식별하는 기본키

(선택) INNER JOIN: 두 테이블의 공통 열만 남도록 JOIN 연산 수행

(선택) LEFT JOIN / RIGHT JOIN: 두 테이블의 공통 열과, 각 테이블의 공통되지 않은 열 중 한 테이블의 열을 남기는 JOIN 연산

(선택) OUTER JOIN: 두 테이블의 공통열이 아닌 나머지 열도 남기는 JOIN연산

(선택) VIEW: 쿼리 정의를 저장해둔 가상 테이블

(선택) Materialized View: 쿼리 결과를 저장해둔 테이블, 원본 테이블이 변경되면 갱신해야 한다.

(선택) UNION: 두 결과를 합치고 중복을 제거하는 연산

(선택) UNION ALL: 두 결과를 합치기만 하는 연산

(선택) Full Table Scan: 테이블 전체를 확인하는 프로세스

(선택) N+1 문제: N개의 데이터 조회를 위해, N번의 쿼리를 요청하는 문제로 오버헤드가 발생한다. 주로 ORM환경에서 Lazy Loading때문에 발생하는 성능 문제 입니다.